Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).


Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

Example 2:

Input: root = [1]
Output: [[1]]

Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-100 <= Node.val <= 100

Code :

class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> result;
        if(root==NULL) return result;

        queue<TreeNode*>q;
        q.push(root);
        bool leftToRight = true;
        while(!q.empty()){
            int size = q.size(); // how many nodes are present at this level
            vector<int> row(size);
            for(int i=0; i<size; i++){ //Traversal current level
               TreeNode *f = q.front();
               q.pop();
               int index = (leftToRight) ? i : (size-1-i);
               row[index] = f->val;

               if(f->left) q.push(f->left);
               if(f->right) q.push(f->right);
            }
            //After current level
            leftToRight = !leftToRight;
            result.push_back(row);

        }
        return result;
    }
};
